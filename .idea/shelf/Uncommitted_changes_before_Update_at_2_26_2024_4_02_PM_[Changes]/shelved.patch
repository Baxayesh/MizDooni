Index: CA1/src/main/java/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport utils.UserRole;\r\n\r\n\r\n@Getter\r\n@Setter\r\npublic class User extends EntityModel<String> {\r\n\r\n    //fields: username password, email, address, role\r\n    private UserRole Role;\r\n\r\n    static String NormalizeUsername(String username){\r\n        return  username.strip().toUpperCase();\r\n    }\r\n\r\n    public User(String username, UserRole role) {\r\n        super(NormalizeUsername(username));\r\n        Role = role;\r\n    }\r\n\r\n    public String getUsername(){\r\n        return super.getKey();\r\n    }\r\n\r\n    public boolean RoleIs(UserRole desiredRole) {\r\n        return Role == desiredRole;\r\n    }\r\n\r\n    @Override\r\n    public boolean Is(String otherKey) {\r\n        return super.Is(NormalizeUsername(otherKey));\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CA1/src/main/java/model/User.java b/CA1/src/main/java/model/User.java
--- a/CA1/src/main/java/model/User.java	(revision 6225917cefdac8ea87a13153a2354118040ec40c)
+++ b/CA1/src/main/java/model/User.java	(date 1708949750098)
@@ -4,6 +4,10 @@
 import lombok.Setter;
 import utils.UserRole;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.regex.Pattern;
+
 
 @Getter
 @Setter
@@ -11,20 +15,74 @@
 
     //fields: username password, email, address, role
     private UserRole Role;
+    private String role;
+    private String username;
+    private String password;
+    private String email;
+    private Address userAddress;
 
     static String NormalizeUsername(String username){
         return  username.strip().toUpperCase();
     }
+    private List<User> users;
 
-    public User(String username, UserRole role) {
+    public User(String username, String role, String password, String email, Address address) {
         super(NormalizeUsername(username));
-        Role = role;
+        //Role = role;
+        this.role = role;
+        this.username = username;
+        this.password = password;
+        this.email = email;
+        userAddress = address;
+        this.users = new ArrayList<>();
     }
+
+    public String addUser(String role, String username, String password, String email, String country, String city) {
+        //String address = country + city;
+        // Validate role
+        if (!role.equals("client") && !role.equals("manager")) {
+            return "Error: Invalid role. Role must be either 'client' or 'manager'.";
+        }
+
+        // Validate username
+        if (username.contains(" ") || username.contains(";") || !Pattern.matches("^[a-zA-Z0-9]*$", username)) {
+            return "Error: Invalid username. Username cannot contain spaces, semi-spaces, or special characters.";
+        }
+
+        // Validate email
+        if (!Pattern.matches("^[A-Za-z0-9+_.-]+@(.+)$", email)) {
+            return "Error: Invalid email format.";
+        }
+
+        // Check for duplicate username or email
+        for (User user : users) {
+            if (user.getUsername().equals(username) || user.getEmail().equals(email)) {
+                return "Error: Username or email already exists.";
+            }
+        }
+
+        // Validate address
+        if (country == null || country.isEmpty() || city == null || city.isEmpty()) {
+            return "Error: Invalid address. Address must include country and city.";
+        }
+
+        // Add user to the list
+        users.add(new User(username, role, password, email, new Address(country,city)));
+
+        return "{\"success\": true, \"data\": \"User added successfully.\"}";
+    }
+
 
     public String getUsername(){
         return super.getKey();
     }
 
+
+    public String getEmail() {
+        return email;
+    }
+
+
     public boolean RoleIs(UserRole desiredRole) {
         return Role == desiredRole;
     }
@@ -34,4 +92,16 @@
         return super.Is(NormalizeUsername(otherKey));
     }
 
-}
\ No newline at end of file
+    public class Address {
+        private String country;
+        private String city;
+
+        public Address(String country, String city) {
+            this.country = country;
+            this.city = city;
+        }
+    }
+}
+
+
+
Index: CA1/src/main/java/model/Restaurant.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport exceptions.*;\r\nimport lombok.Getter;\r\nimport lombok.Setter;\r\nimport utils.AvailableTable;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.time.LocalTime;\r\nimport java.util.ArrayList;\r\nimport java.util.Collection;\r\n\r\n@Getter\r\n@Setter\r\npublic class Restaurant extends EntityModel<String> {\r\n\r\n    private LocalTime OpenTime;\r\n    private LocalTime CloseTime;\r\n    private User Manager;\r\n    private String Type;\r\n    private String Description;\r\n    private ArrayList<Table> Tables;\r\n    //address\r\n\r\n    public String getName(){\r\n        return super.getKey();\r\n    }\r\n\r\n    public Restaurant(String name, LocalTime openTime, LocalTime closeTime, User manager, String type, String description) {\r\n        super(name);\r\n        OpenTime = openTime;\r\n        CloseTime = closeTime;\r\n        Manager = manager;\r\n        Type = type;\r\n        Description = description;\r\n        Tables = new ArrayList<>();\r\n    }\r\n\r\n\r\n    void EnsureTimeIsRound(LocalTime time) throws TimeIsNotRound {\r\n        var roundTime = LocalTime.of(time.getHour(), 0);\r\n\r\n        if(! time.equals(roundTime)){\r\n            throw new TimeIsNotRound();\r\n        }\r\n    }\r\n\r\n    void EnsureTimeBelongsToFuture(LocalDateTime time) throws TimeBelongsToPast {\r\n        if(time.isBefore(LocalDateTime.now())){\r\n            throw new TimeBelongsToPast();\r\n        }\r\n    }\r\n\r\n    void EnsureTimeIsInWorkHours(LocalTime time) throws NotInWorkHour {\r\n        if(time.isBefore(OpenTime) || time.isAfter(CloseTime))\r\n            throw new NotInWorkHour();\r\n    }\r\n\r\n    Table FindTable(int tableNumber) throws NotExistentTable {\r\n        for(var table : Tables){\r\n            if(table.Is(tableNumber)){\r\n                return table;\r\n            }\r\n        }\r\n\r\n        throw new NotExistentTable();\r\n    }\r\n\r\n    public Reserve MakeReserve(int reserveNumber, User reservee, int tableNumber, LocalDateTime reserveTime)\r\n            throws TableIsReserved, TimeIsNotRound, TimeBelongsToPast, NotInWorkHour, NotExistentTable {\r\n\r\n        EnsureTimeIsRound(reserveTime.toLocalTime());\r\n        EnsureTimeBelongsToFuture(reserveTime);\r\n        EnsureTimeIsInWorkHours(reserveTime.toLocalTime());\r\n        var table = FindTable(tableNumber);\r\n        return table.MakeReserve(reserveNumber, reservee, reserveTime); // store history\r\n    }\r\n\r\n    public Collection<AvailableTable> GetAvailableTables(){\r\n\r\n        var availableTables = new ArrayList<AvailableTable>();\r\n\r\n        for(var table : Tables) {\r\n            var availability = table.GetAvailableTimes();\r\n            if(!availability.NotAvailable()){\r\n                availableTables.add(availability);\r\n            }\r\n        }\r\n\r\n        return availableTables;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CA1/src/main/java/model/Restaurant.java b/CA1/src/main/java/model/Restaurant.java
--- a/CA1/src/main/java/model/Restaurant.java	(revision 6225917cefdac8ea87a13153a2354118040ec40c)
+++ b/CA1/src/main/java/model/Restaurant.java	(date 1708950528545)
@@ -10,6 +10,10 @@
 import java.util.ArrayList;
 import java.util.Collection;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.regex.Pattern;
+
 @Getter
 @Setter
 public class Restaurant extends EntityModel<String> {
@@ -21,12 +25,16 @@
     private String Description;
     private ArrayList<Table> Tables;
     //address
+    private Address restaurantAddress;
+
+    private List<Restaurant> restaurants;
+    private List<User> users;
 
     public String getName(){
         return super.getKey();
     }
 
-    public Restaurant(String name, LocalTime openTime, LocalTime closeTime, User manager, String type, String description) {
+    public Restaurant(String name, LocalTime openTime, LocalTime closeTime, User manager, String type, String description, Address address) {
         super(name);
         OpenTime = openTime;
         CloseTime = closeTime;
@@ -34,7 +42,47 @@
         Type = type;
         Description = description;
         Tables = new ArrayList<>();
+        restaurantAddress = address;
+        this.restaurants = new ArrayList<>();
+        this.users = new ArrayList<>();
     }
+
+    public String addRestaurant(String name, String managerUsername, String type, String startTime, String endTime, String description, String country, String city, String street) {
+        // Validate restaurant name
+        for (Restaurant restaurant : restaurants) {
+            if (restaurant.getName().equals(name)) {
+                return "Error: Restaurant name already exists.";
+            }
+        }
+
+        // Validate manager username
+        boolean managerExists = false;
+        for (User user : users) {
+            if (user.getUsername().equals(managerUsername) && user.getRole().equals("manager")) {
+                managerExists = true;
+                break;
+            }
+        }
+        if (!managerExists) {
+            return "Error: Manager username does not exist or is not a manager.";
+        }
+
+        // Validate start and end times
+        if (!Pattern.matches("^([01]?[0-9]|2[0-3]):[0-5][0-9]$", startTime) || !Pattern.matches("^([01]?[0-9]|2[0-3]):[0-5][0-9]$", endTime)) {
+            return "Error: Invalid start or end time format.";
+        }
+
+        // Validate address
+        if (country == null || country.isEmpty() || city == null || city.isEmpty() || street == null || street.isEmpty()) {
+            return "Error: Invalid address. Address must include country, city, and street.";
+        }
+
+        // Add restaurant to the list
+        restaurants.add(new Restaurant(name, startTime, endTime, managerUsername, type, description, new Address(country, city, street)));
+
+        return "{\"success\": true, \"data\": \"Restaurant added successfully.\"}";
+    }
+
 
 
     void EnsureTimeIsRound(LocalTime time) throws TimeIsNotRound {
@@ -89,4 +137,16 @@
 
         return availableTables;
     }
-}
\ No newline at end of file
+    public class Address {
+        private String country;
+        private String city;
+        private String street;
+
+        public Address(String country, String city, String street) {
+            this.country = country;
+            this.city = city;
+            this.street = street;
+        }
+    }
+}
+
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1708943037686)
+++ b/.idea/compiler.xml	(date 1708943037686)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="CA1" />
+      </profile>
+    </annotationProcessing>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1708943037758)
+++ b/.idea/modules.xml	(date 1708943037758)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/MizDooni.iml" filepath="$PROJECT_DIR$/.idea/MizDooni.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1708943037647)
+++ b/.idea/misc.xml	(date 1708943037647)
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/CA1/pom.xml" />
+      </list>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_20" default="true" project-jdk-name="openjdk-20" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/MizDooni.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/MizDooni.iml b/.idea/MizDooni.iml
new file mode 100644
--- /dev/null	(date 1708943037876)
+++ b/.idea/MizDooni.iml	(date 1708943037876)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1708943037883)
+++ b/.idea/jarRepositories.xml	(date 1708943037883)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1708943037797)
+++ b/.idea/.gitignore	(date 1708943037797)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1708943037837)
+++ b/.idea/vcs.xml	(date 1708943037837)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1708943037926)
+++ b/.idea/encodings.xml	(date 1708943037926)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/CA1/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/CA1/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
