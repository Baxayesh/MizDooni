/**
 * Generated by orval v6.29.1 🍺
 * Do not edit manually.
 * Mizdooni
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  AddRestaurantRequest,
  CreateTableRequest,
  EntityCreatedResponse,
  GetAllReviewsParams,
  GetAvailableReserveSlotsParams,
  GetCurrentUserReservesParams,
  GetRestaurantTablesParams,
  GoogleOauth2CallbackParams,
  LocalTime,
  LocationModel,
  LoginRequest,
  PagedResponseRestaurantModel,
  PagedResponseReviewModel,
  PostReviewParams,
  PostReviewRequest,
  RecommendParams,
  ReserveModel,
  ReserveTableRequest,
  RestaurantModel,
  SearchByTypeParams,
  SignupRequest,
  TableModel,
  TokenModel
} from './contracts'



  export const getMizdooni = () => {
const signup = <TData = AxiosResponse<TokenModel>>(
    signupRequest: SignupRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://localhost:500/users`,
      signupRequest,options
    );
  }

const getRestaurantTables = <TData = AxiosResponse<TableModel[]>>(
    params: GetRestaurantTablesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/tables`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

const createTable = <TData = AxiosResponse<EntityCreatedResponse>>(
    createTableRequest: CreateTableRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://localhost:500/tables`,
      createTableRequest,options
    );
  }

const login = <TData = AxiosResponse<TokenModel>>(
    loginRequest: LoginRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://localhost:500/sessions`,
      loginRequest,options
    );
  }

const getAllReviews = <TData = AxiosResponse<PagedResponseReviewModel>>(
    params: GetAllReviewsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/reviews`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

const postReview = <TData = AxiosResponse<void>>(
    postReviewRequest: PostReviewRequest,
    params: PostReviewParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://localhost:500/reviews`,
      postReviewRequest,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

const getManagerRestaurants = <TData = AxiosResponse<RestaurantModel[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/restaurants`,options
    );
  }

const addRestaurant = <TData = AxiosResponse<void>>(
    addRestaurantRequest: AddRestaurantRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://localhost:500/restaurants`,
      addRestaurantRequest,options
    );
  }

const getCurrentUserReserves = <TData = AxiosResponse<ReserveModel[]>>(
    params?: GetCurrentUserReservesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/reserves`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

const reserveTable = <TData = AxiosResponse<EntityCreatedResponse>>(
    reserveTableRequest: ReserveTableRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://localhost:500/reserves`,
      reserveTableRequest,options
    );
  }

const manageGoogleOauth2Callback = <TData = AxiosResponse<TokenModel>>(
    googleOauth2CallbackParams: GoogleOauth2CallbackParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `https://localhost:500/oauth2`,
      googleOauth2CallbackParams,options
    );
  }

const searchByType = <TData = AxiosResponse<PagedResponseRestaurantModel>>(
    params?: SearchByTypeParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

const getRestaurant = <TData = AxiosResponse<RestaurantModel>>(
    name: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/restaurants/${name}`,options
    );
  }

const getAvailableReserveSlots = <TData = AxiosResponse<LocalTime[]>>(
    name: string,
    params: GetAvailableReserveSlotsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/restaurants/${name}/availableTimeSlots`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

const getReserveDetails = <TData = AxiosResponse<ReserveModel>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/reserves/${id}`,options
    );
  }

const cancelReserve = <TData = AxiosResponse<void>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `https://localhost:500/reserves/${id}`,options
    );
  }

const recommend = <TData = AxiosResponse<RestaurantModel[]>>(
    params?: RecommendParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/recommend`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

const getLocations = <TData = AxiosResponse<LocationModel[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/locations`,options
    );
  }

const getFoodTypes = <TData = AxiosResponse<string[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `https://localhost:500/foodTypes`,options
    );
  }

return {signup,getRestaurantTables,createTable,login,getAllReviews,postReview,getManagerRestaurants,addRestaurant,getCurrentUserReserves,reserveTable,manageGoogleOauth2Callback,searchByType,getRestaurant,getAvailableReserveSlots,getReserveDetails,cancelReserve,recommend,getLocations,getFoodTypes}};
export type SignupResult = AxiosResponse<TokenModel>
export type GetRestaurantTablesResult = AxiosResponse<TableModel[]>
export type CreateTableResult = AxiosResponse<EntityCreatedResponse>
export type LoginResult = AxiosResponse<TokenModel>
export type GetAllReviewsResult = AxiosResponse<PagedResponseReviewModel>
export type PostReviewResult = AxiosResponse<void>
export type GetManagerRestaurantsResult = AxiosResponse<RestaurantModel[]>
export type AddRestaurantResult = AxiosResponse<void>
export type GetCurrentUserReservesResult = AxiosResponse<ReserveModel[]>
export type ReserveTableResult = AxiosResponse<EntityCreatedResponse>
export type ManageGoogleOauth2CallbackResult = AxiosResponse<TokenModel>
export type SearchByTypeResult = AxiosResponse<PagedResponseRestaurantModel>
export type GetRestaurantResult = AxiosResponse<RestaurantModel>
export type GetAvailableReserveSlotsResult = AxiosResponse<LocalTime[]>
export type GetReserveDetailsResult = AxiosResponse<ReserveModel>
export type CancelReserveResult = AxiosResponse<void>
export type RecommendResult = AxiosResponse<RestaurantModel[]>
export type GetLocationsResult = AxiosResponse<LocationModel[]>
export type GetFoodTypesResult = AxiosResponse<string[]>
